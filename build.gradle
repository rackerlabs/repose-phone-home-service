group = 'org.openrepose.phonehome'
version = '1.0.3'

buildscript {
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath("org.unbroken-dome.gradle-plugins:gradle-testsets-plugin:1.0.2")
        classpath("org.springframework.boot:spring-boot-gradle-plugin:1.2.5.RELEASE")
        classpath("com.netflix.nebula:gradle-ospackage-plugin:2.2.6")
        classpath("org.hidetake:gradle-ssh-plugin:1.0.5")
        classpath( "com.netflix.nebula:gradle-git-scm-plugin:3.0.1")
    }
}

apply plugin: 'idea'
apply plugin: 'scala'
apply plugin: 'groovy'
apply plugin: 'org.unbroken-dome.test-sets'
apply plugin: 'spring-boot'
apply plugin: 'nebula.os-package'
apply plugin: 'maven-publish'
apply plugin: 'org.hidetake.ssh'
apply plugin: 'nebula.gradle-git-scm'

testSets {
    integrationTest
}

check.dependsOn integrationTest
integrationTest.mustRunAfter test

repositories {
    mavenCentral()
    maven {
        url 'http://repo.spring.io/milestone'
    }
}

sourceCompatibility = 1.7
targetCompatibility = 1.7

def springBootVersion = "1.3.0.RELEASE"
def spockVersion = "1.0-groovy-2.4"

dependencies {
    compile("org.scala-lang:scala-library:2.11.7")
    compile("org.springframework.boot:spring-boot-starter-web:$springBootVersion")
    compile("org.springframework.boot:spring-boot-starter-data-mongodb:$springBootVersion")
    testCompile("junit:junit:4.12")
    testCompile("org.scalatest:scalatest_2.11:2.2.5")
    testCompile("org.mockito:mockito-all:1.10.19")
    integrationTestCompile("org.codehaus.groovy:groovy:2.4.4")
    integrationTestCompile("junit:junit:4.12")
    integrationTestCompile("org.springframework.boot:spring-boot-starter-test:$springBootVersion")
    integrationTestCompile("de.flapdoodle.embed:de.flapdoodle.embed.mongo:1.50.0")
    integrationTestCompile("org.apache.httpcomponents:httpclient:4.5.1")
    integrationTestCompile("org.spockframework:spock-core:$spockVersion")
    integrationTestCompile("org.spockframework:spock-spring:$spockVersion")
}

idea {
    module {
        testSourceDirs += project.sourceSets.integrationTest.allSource.srcDirs.flatten()
        scopes.TEST.plus += [configurations.integrationTestCompile]
    }
}

ospackage {
    packageName = "repose-phone-home"
    version = project.version
    release = 1
    arch = "all"
    os = LINUX

    user = 'repose-phone-home'
    permissionGroup = 'repose-phone-home'

    preInstall file('src/files/preInstall.sh')
    postInstall file('src/files/postInstall.sh')
    postUninstall file('src/files/postUninstall.sh')

    into '/opt/repose-phone-home'

    from(jar.outputs.files) {
        rename("${project.name}-${project.version}.jar", "repose-phone-home.jar")
    }

    from("src/files/config/application.properties") {
        fileType CONFIG | NOREPLACE
    }

    from("src/files/config/repose-phone-home") {
        fileType CONFIG | NOREPLACE
        into "/etc/default"
    }

    from("src/files/inits") {
        fileMode 0550
    }
}

buildDeb {
    requires('openjdk-7-jre-headless')
    //Link in our init script
    link('/etc/init.d/repose-phone-home', '/opt/repose-phone-home/repose-phone-home-debian.init')

}

publishing {
    publications {
        mavenJar(MavenPublication) {
            artifactId "phone-home-service"
            artifact source: jar, extension: 'jar'
        }
        mavenDeb(MavenPublication) {
            artifactId "phone-home-service-deb"
            artifact source: buildDeb, extension: 'deb'
        }
    }

    repositories {
        maven {
            name 'releases.maven.research.rackspace.com'
            url 'https://maven.research.rackspacecloud.com/content/repositories/releases'
            credentials {
                username property('maven.repo.username')
                password property('maven.repo.password')
            }
        }
    }
}

remotes {
    packageRepo {
        user = 'repose-dev'
        host = 'repo.openrepose.org'
        def repoKey = new File("${System.properties['user.home']}/.ssh/repo_key")
        if (repoKey.exists()) {
            identity = file(repoKey)
        } else {
            identity = file("${System.properties['user.home']}/.ssh/id_rsa")
        }
        def systemKnownHosts = new File("/etc/ssh/ssh_known_hosts")
        if (systemKnownHosts.exists()) {
            knownHosts = file(systemKnownHosts)
        }
    }
}

task('publishToPackageRepo', dependsOn: buildDeb, group: 'publishing', description: 'Publishes the debian package to the package repo.') << {
    ssh.run {
        session(remotes.packageRepo) {
            put from: buildDeb.outputs.files, into: '/home/repose-dev/RELEASES'
        }
    }
}

task('tagVersion', description: 'Tag the repository with the current version.', group: 'release') << {
    scmFactory.create().tag(version)
}

task('release', description: 'Release the project and publish to all repos.', group: 'release', dependsOn: [publish, publishToPackageRepo, tagVersion])

buildDeb.dependsOn bootRepackage, build
tasks.findAll( { it.name.startsWith('publishMavenJar') } ).each { it.dependsOn bootRepackage, build }
tasks.findAll( { it.name.startsWith('publishMavenDeb') } ).each { it.dependsOn buildDeb }
